# include what you want

# moving this laster, since that's the way I like it
#export PATH=$PATH:$HOME/bin

# add this to the .bashrc: . $HOME/.bashrc.load

# because ssh keys save lives :)
# for reference, cygwin's current keychain (2.7.1) sucks
KEYCHAINLOC=/usr/bin/keychain
if [ -f $KEYCHAINLOC ]
then {
  $KEYCHAINLOC --agents ssh $HOME/.ssh/id_rsa
  source $HOME/.keychain/`hostname -s`-sh
}
fi

# Handy function
IsEmpty() {
  if [[ "${1}" = "" ]]
  then {
    return 1
  }
  else {
    return 0
  }
fi
}

### PATH CHANGES ###

# If I'm on a system that has puppet on it, make sure it's in my path, because that's how I roll
if [ -d /opt/puppet ]
then {
  export PATH=$PATH:/opt/puppet/bin
}
fi

if [ -d /opt/puppetlabs/pdk ]
then {
  export PATH=$PATH:/opt/puppetlabs/pdk/bin
}
fi

# Add my bin dir & gemdir to my path & the X11 path
export PATH=$PATH:/usr/X11R6/bin:$HOME/bin:$HOME/.gem/bin:$HOME/mybin

### END PATH CHANGES ###


# Add in some extra bash completion help
if [ -f /usr/local/etc/bash_completion ]
then {
  . /usr/local/etc/bash_completion
}
fi

if [ -f ~/.dotfiles/exercism_completion.bash ]
then {
  . ~/.dotfiles/exercism_completion.bash
}
fi

# Fixing history to be useful.  Based on http://blog.sanctum.geek.nz/better-bash-history/
shopt -s histappend
shopt -s cmdhist
HISTFILESIZE=1000000
HISTSIZE=1000000
HISTCONTROL=ignoreboth
HISTTIMEFORMAT='%F %T '
PROMPT_COMMAND='history -a'


# Adding some custom aliases
# because I hate the default ls colors, and I'm too lazy to change it
if [ `type -t ls` == "alias" ]
then {
    unalias ls
}
fi
alias lf='ls -F'
alias pine='pine -d0'
#alias mounthome='sshfs chsnell@rtp-xdm-102.cisco.com:/users/chsnell /sshmounts/home'
#alias mountws='sshfs chsnell@rtp-xdm-102.cisco.com:/ws/chsnell-rtp /sshmounts/ws'
#alias mounteman='sshfs chsnell@chsnell-lnx.cisco.com:/users/chsnell /sshmounts/emanhome'
#alias filer='sshfs csnell@file.rdu.redhat.com:/home/rdu/csnell ~/filer'
alias teamtime='zdump EST5EDT UTC PST8PDT Asia/Kolkata'

# Alias to work around MacOSX's default git being old and a security risk
if [[ -x /usr/local/bin/git ]]
then {
  alias git='/usr/local/bin/git'
}
fi

# Putting a couple of options in here for common programs
GREP_OPTIONS="--color=auto"
LESS="-X"

# Handy function to create gitignore files from a web api
#function gi() { curl -s http://www.gitignore.io/api/$@ ;}
function gi() { curl -L -s https://www.gitignore.io/api/\$@ ;}


# Must...have...local...gem path...
export GEM_HOME=~/.gem

# Nice to have tab completion for git.  Must remember to pull file from
# https://github.com/git/git/blob/master/contrib/completion/git-completion.bash
source ~/.dotfiles/git-completion.bash

# And git prompt foo
source ~/.dotfiles/git-prompt.sh

# And now for my custom prompt
# Borrowed heavily from https://wiki.archlinux.org/index.php/Color_Bash_Prompt
set_prompt() {
  LAST_COMMAND=$? # Must come first!
  # Setting up colors for ease of use
  Blue='\[\e[01;34m\]'
  White='\[\e[01;37m\]'
  Red='\[\e[01;31m\]'
  Green='\[\e[01;32m\]'
  Yellow='\[\e[01;33m\]'
  Cyan='\[\e[01;36m\]'
  Reset='\[\e[00m\]'
  FancyX='\342\234\227'
  Checkmark='\342\234\223'

  # Start with the time
  PS1="\t "

  # If last command was successfull, print a green check mark. Otherwise, a red X
  if [[ $LAST_COMMAND == 0 ]]; then
    PS1+="$Green$Checkmark "
  else
    PS1+="$Red$FancyX "
  fi

  # If root, just print the host in red. Otherwise, print the current user
  # and host in light blue.
  if [[ $EUID == 0 ]]; then
    PS1+="$Red\\h"
  else
    PS1+="$Cyan\\u@\\h"
  fi

  # Print a white seperator
  PS1+="$White:"

  # Print working directory in yellow
  PS1+="$Yellow\\w$Reset "

  # Now add our git status.  Read git-prompt.sh for what these variables do.
  #GIT_PS1_SHOWDIRTYSTATE=true
  #GIT_PS1_SHOWSTASHSTATE=true
  #GIT_PS1_SHOWUNTRACKED_FILES=true
  #GIT_PS1_SHOWUPSTREAM="auto"
  PS1+='$(__git_ps1 "(%s)")'

  PS1+="\\$ "
}
  
PROMPT_COMMAND='set_prompt'

### END PROMPT ###

# Handy function for deleting a line by line number from a file (useful for cleaning
# up old keys in known_hosts)
function delline () {
  sed -i "${1}d" ~/.ssh/known_hosts
}

# If doing ruby/puppet development, this is handy
#eval "$(rbenv init -)"

# Because GPG is becoming more prevalent in my life :(
export GPG_TTY=`tty`
#/usr/local/bin/gpg-agent --daemon --enable-ssh-support --write-env-file ~/.gpg-agent-info
#source ~/.gpg-agent-info

#export JAVA_HOME=`/usr/libexec/java_home -v 1.8.0_102`

# Adding some gcal foo
if [ -d /usr/local/bin/gcalcli ]
then {
  alias gchome='gcalcli --configFolder ~/.gcalclihome'
  alias gcwork='gcalcli --configFolder ~/.gcalcliwork'
}
fi

# (hopefully) Fixing terminal titles
echo -ne "\033]0;${USER}@${HOSTNAME}\007"
